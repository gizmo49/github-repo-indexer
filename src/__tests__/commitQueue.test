import Bull from 'bull';
import { Worker } from 'worker_threads';
import { mocked } from 'jest-mock';
import commitQueue from '../queues/commitQueue';
import { IGithubCommit } from '../interface';

// Mock dependencies
jest.mock('bull');
jest.mock('worker_threads', () => {
    const actualWorkerThreads = jest.requireActual('worker_threads');
    return {
        ...actualWorkerThreads,
        Worker: jest.fn().mockImplementation(() => ({
            on: jest.fn((event, listener) => {
                // Simulate worker behavior based on the event
                if (event === 'message') {
                    listener({ event: 'success' });
                } else if (event === 'error') {
                    listener(new Error('Worker error'));
                } else if (event === 'exit') {
                    listener(0);
                }
            }),
            postMessage: jest.fn(),
            terminate: jest.fn(),
        })),
    };
});

const mockedCommitQueue = mocked(commitQueue);

beforeEach(() => {
    jest.clearAllMocks();
});

describe('commitQueue', () => {
    it('should process commits using a worker', async () => {
        const mockCommits: IGithubCommit[] = [
            {
                commitMessage: 'Initial commit',
                author: 'John Doe',
                commitDate: '2024-08-10T00:00:00Z',
                commitUrl: 'http://example.com/commit/1',
            },
        ];

        // Simulate adding a job to the queue
        const addJobSpy = jest.spyOn(mockedCommitQueue, 'add').mockResolvedValue({} as any);

        // Add a job to the queue
        await commitQueue.add('indexCommits', {
            commits: mockCommits,
            orgName: 'test-org',
            repoName: 'test-repo',
        });

        // Verify that the worker was created with the correct parameters
        expect(Worker).toHaveBeenCalledWith('./src/workers/commitWorker.ts', {
            workerData: {
                commits: mockCommits,
                orgName: 'test-org',
                repoName: 'test-repo',
            },
            execArgv: ['--require', 'ts-node/register'],
        });

        // Verify that the job was added to the queue
        expect(addJobSpy).toHaveBeenCalledWith('indexCommits', {
            commits: mockCommits,
            orgName: 'test-org',
            repoName: 'test-repo',
        });
    });

    it('should handle worker errors', async () => {
        const mockCommits: IGithubCommit[] = [
            {
                commitMessage: 'Initial commit',
                author: 'John Doe',
                commitDate: '2024-08-10T00:00:00Z',
                commitUrl: 'http://example.com/commit/1',
            },
        ];

        // Simulate adding a job to the queue
        const addJobSpy = jest.spyOn(mockedCommitQueue, 'add').mockResolvedValue({} as any);

        // Add a job to the queue
        await commitQueue.add('indexCommits', {
            commits: mockCommits,
            orgName: 'test-org',
            repoName: 'test-repo',
        });

        // Verify that the worker was created with the correct parameters
        expect(Worker).toHaveBeenCalledWith('./src/workers/commitWorker.ts', {
            workerData: {
                commits: mockCommits,
                orgName: 'test-org',
                repoName: 'test-repo',
            },
            execArgv: ['--require', 'ts-node/register'],
        });

        // Simulate worker error
        const workerInstance = (Worker as unknown as jest.Mock).mock.instances[0];
        workerInstance.on.mockImplementation((event: string, listener: any) => {
            if (event === 'error') {
                listener(new Error('Worker error'));
            }
        });

        // No direct way to verify console.error, but the error should be handled properly
    });

    it('should handle worker exit with non-zero code', async () => {
        const mockCommits: IGithubCommit[] = [
            {
                commitMessage: 'Initial commit',
                author: 'John Doe',
                commitDate: '2024-08-10T00:00:00Z',
                commitUrl: 'http://example.com/commit/1',
            },
        ];

        // Simulate adding a job to the queue
        const addJobSpy = jest.spyOn(mockedCommitQueue, 'add').mockResolvedValue({} as any);

        // Add a job to the queue
        await commitQueue.add('indexCommits', {
            commits: mockCommits,
            orgName: 'test-org',
            repoName: 'test-repo',
        });

        // Verify that the worker was created with the correct parameters
        expect(Worker).toHaveBeenCalledWith('./src/workers/commitWorker.ts', {
            workerData: {
                commits: mockCommits,
                orgName: 'test-org',
                repoName: 'test-repo',
            },
            execArgv: ['--require', 'ts-node/register'],
        });

        // Simulate worker exit with non-zero code
        const workerInstance = (Worker as unknown as jest.Mock).mock.instances[0];
        workerInstance.on.mockImplementation((event: string, listener: any) => {
            if (event === 'exit') {
                listener(1); // Non-zero exit code
            }
        });

        // No direct way to verify console.error, but the exit code should be handled properly
    });
});
